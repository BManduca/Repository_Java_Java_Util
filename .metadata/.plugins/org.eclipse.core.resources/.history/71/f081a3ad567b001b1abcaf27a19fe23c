Para inicar o curso, criamos um novo projeto e dentro deste 
projeto, uma nova classe chamada Fluxo:

public class Fluxo {

    public static void main(String[] args) {
        System.out.println("Ini do main");
        metodo1();
        System.out.println("Fim do main");
    }

    private static void metodo1() {
        System.out.println("Ini do metodo1");
        metodo2();
        System.out.println("Fim do metodo1");
    }

    private static void metodo2() {
        System.out.println("Ini do metodo2");
        for(int i = 1; i <= 5; i++) {
            System.out.println(i);
        }
        System.out.println("Fim do metodo2");
    }
}

ao executar noso projeto, no console aparecerá:
 - "Ini do main", chamando logo em seguida e acessando o metodo1();
 - "Ini do metodo1", chamando logo em seguida e acessando o metodo2();
 - "Ini do metodo 2", que na sequência, será executado um laço de repetição, no qual a 
 variável i começa em 1 e vai até 5. Essa mensagem será exibida até o final do laço.

Para cada finalização de execução do método, será impresso uma mensagem de conclusão, na seguinte ordem:
 - Fim do metodo2;
 - Fim do metodo1;
 - Fim do main;


Ate o momento podemos reparar que não temos orientação a objetos, mas independente do 
paradigma de programação, usamos uma pilha de execução. 

para entendermos melhor:
Um programa Java sempre começa no metodo main(). A pilha ou stach existe para organizar 
a execução do código, lembrando que ainda precisa ser executado.

O Java sempre irá procurar primeiro pelo método main(). Depois, ele cria a pilha e coloca o bloco
de código dentro de outro, na pilha. Em seguida, o código do método1() é inserido na pilha

** A pilha existe para executar algo e lembrar o que ainda precisa ser executado.


Agora o método1() entra na pilha de execução.
Reparem que o main() ainda não foi finalizado, porém, elen não está em execução agora, 
apenas o método que está no topo da pilha que estará sendo executado.

A partir do métodos1(), vem a chamada do método2() e todo o bloco de código é 
jogado dentro da pilha.

Demonstrando:


Pilha(Stack)

|           |
|           |
|           |
|           |
| metodo2() |
| metodo1() |
|__main()___|


Console:
Ini do main
Ini do metodo1
Ini do metodo2
1
2
3
4
5
Fim do metodo2




Os métodos main() e metodo1() estão separados, pois ainda tem código
a ser executado, no caso, as linhas do "Fim do metodo1" e "Fim do main".

O metodo2() está sendo executado, pois, está no tipo da pilha, 
que conseguirá removê-lo assim que terminar de executá-lo, quando 
não houver mais nada para executar deste metodo.


Demonstrando:


Pilha(Stack)

|           |
|           |
|           |
|           |
|           |
| metodo1() |
|__main()___|


Console:
Ini do main
Ini do metodo1
Ini do metodo2
1
2
3
4
5
Fim do metodo2
Fim do metodo1


Quem está executando agora é o metodo1(). O que sobrou nele é a linha que exibe a 
mensagem "Fim do metodo1". Depois que ele acaba, a pilha remove e continua com a main(),
que ficou por último.


Demonstrando:


Pilha(Stack)

|           |
|           |
|           |
|           |
|           |
|           |
|__main()___|


Console:
Ini do main
Ini do metodo1
Ini do metodo2
1
2
3
4
5
Fim do metodo2
Fim do metodo1
Fim do main


Voltando a main(), é exibida a linha que imprime "Fim do main". Com isso, 
é finalizado e retirado da pilha.



Demonstrando:


Pilha(Stack)

|           |
|           |
|           |
|           |
|           |
|           |
|___________|


Console:
Ini do main
Ini do metodo1
Ini do metodo2
1
2
3
4
5
Fim do metodo2
Fim do metodo1
Fim do main


Ao acabar os métodos da pilha, o Java entende que o processo foi encerrado.

A pilha existe para saber qual método está sendo executado no momento, ou seja,
o que está no topo e lembrar quais ainda precisam ser executadas.



Depuração:


Ao debugarmos o programa, será possível ver as mudanças em tempo real, 
em uma velocidade que podemos acompanhar. Para isso, no eclipse
com o botão direito em "main() > Debug As > Java Application".

No debug o main() é o primeiro método que está sendo executado.
Ao colocar um breakpoint e ter acesso ao mesmo, o programa ficará parado
neste ponto, assim inicia a analise em debug, assim, 
o java fica aguardando as instruções, para avanço de linha a linha 
usamos a opção Step Over no eclipse, assim vai indo a execução linha a linha,
ajudando assim em uma análise mais clinica.



Exceções: O que são e para que servem?

As exceções são problemas que acontecem na hora de compilar o código. Considerando que existe uma 
variedade imensa, elas possuem nomes explicativose, as vezes, mostram claramente o motivo de seu surgimento, 
falicitando a identificação delas.


Um exemplo de exceção:


public class TesteContas {

    public static void main(String[] args) {

        //instancia para testar exceção!!!!
        ContaCorrente conta = null;
        outra.deposita(200.0);

        //instancia da conta corrente
        ContaCorrente cc = new ContaCorrente(111, 111);
        cc.deposita(100.0);

        //instancia da conta poupança
        ContaPoupanca cp = new ContaPoupanca(222, 222);
        cp.deposita(200.0);
    }
}


Console: 
Exception in thread "main" java.lang.NullPointerException
        at TesteContas.main(TesteContas.java:7)
        
        
        
É possível verificar que essa referência não foi inicializada corretamente.
Em alguns casos, não conseguimos enxergar se essa referência foi inicializada 
de forma correta ou não, o que pode ocasionar a exibição desse problema no console.

Mas, qando isso acontece, o desenvolvedor precisa entender o que houve e o que 
ele fez de errado. Considerando que a exceção se chama NullPointerException e nós inicializamos a váriavel
conta como nula, deduzimos que ela faz referência à váriavel. 


Outro exemplo: 
Dentro do main, colocaremos a seguinte operação:

public class TesteContas {
    public static void main(String[] args) {

        int a = 3;
        int b = a / 0;
    }
}

Aqui não ocorrerá erro de sintaxe, porém, o que vai acontecer?

Console:

Exception in thread "main" java.lang.ArithmeticException: / by zero
        at TesteContas.main(TesteContas.java:7)
        
/ by zero, ou seja, nem o Java consegue dividir algo por zero. Esse tipo de problema
não deveria acontecer, mas em um ambiente mais complexo, é realmente mais díficil prever.


A primeira motivação é que erros e exceções acontecem. Portanto, precisamos saber lidar com elas.
Mais um exemplo, para praticar:

Na classe Conta, existe um método saca(), que recebe um valor como parâmetro:


public boolean saca(double valor) {
    if(this.saldo >= valor) {
        this.saldo -= valor;
        return true;
    } else {
        return false;
    }
}

Se caso funcionar, devolve true, caso contrário, devolve false. Nessa implementação, partiremos 
do príncipio de que existe apenas um motivo para que o saque não funcione: saldo insuficiente.
Considerando um cenário real, existem mais motivos que impedem o saque. 
Pode ser o limite diário, o horário comercial, o banco pode estar fechado no momento
e achar que nós poderíamos fraudar ou qualquer outro motivo.

O método retorna somente "Funcionou" ou "Não funcionou", mas queremos que ele nos retorne
motivos específicos quando não funcionar. Para isso, usamos as exceções:

Na nossa classe Fluxo, vamos verificar como isso funciona junto à pilha:


Introduzindo um erro simples no metodo2() para nos ajudar a entender melhor. Declararemos
uma nova variável e a dividimos por zero:

private static void metodo2() {
    System.out.println("Ini do metodo2");
    for(int i = 1; i <= 5; i++) {
        System.out.println(i);
        int a = i / 0;
    }
    System.out.println("Fim do metodo2");
}


Obviamente, não é uma boa idéia, mas é importante ver como realmente entendemos essa 
exceção.

Ao executar, no console aparecerá assim:

Ini do main
Ini do metodo1
Ini do metodo2
1
Exception in thread "main" java.lang.ArithmeticException: / by zero
        at Fluxo.metodo2(Fluxo.java:19)
        at Fluxo.metodo1(Fluxo.java:11)
        at Fluxo.main(Fluxo.java:5)
        

Logo abaixo de ArithmeticException, conseguimos verificar a pilha de execução.
Em cima do main, temos o metodo1, acima dele, temos o metodo2.


Podemos observar que o Console de Execução com Exceção é semelhante ao normal, até 1. 
Além da exibição do nome (ArithmeticException) e da mensagem (/ by zero), apó o 1, 
a execução muda = por causa da exceção - é exibido a pilha de execução.









































